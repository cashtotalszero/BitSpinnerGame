#include "bitspinner.h"

void SDL_initialise(SDL_Simplewin *sw ,Game *current){

	//Initialise everything
  	if(SDL_Init(SDL_INIT_EVERYTHING) != 0){
  		fprintf(stderr, "\nUnable to initialize SDL:  %s\n", SDL_GetError());
      SDL_Quit();
      exit(1);
   	}
   	//initialise sw->finished
   	sw->finished = 0;
  	//initialise sw->win
	sw->win = SDL_CreateWindow("BITSPINNER", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, WWIDTH, WHEIGHT, SDL_WINDOW_SHOWN);
	if(sw->win == NULL){
      fprintf(stderr, "\nUnable to initialize SDL Window:  %s\n", SDL_GetError());
      SDL_Quit();
      exit(1);
   	}
   	//load bmp names
   	load_bmps(current);
}

void load_bmps(Game *current){

	FILE *bmps;
	char in_str[MAX_STRING];
	Bmp_node *bmp_current;

	current->start = initialise_bmp_list();
	bmp_current = current->start;

	bmps = gfopen("bmp_names", "r");

	while(fgets(in_str, MAX_STRING, bmps) != NULL){
		bmp_current = create_bmp_node(in_str, bmp_current);
	}
	fclose(bmps);
}

Bmp_node *create_bmp_node(char *p, Bmp_node *current){

	int len;

	current->next = (Bmp_node*)malloc(sizeof(Bmp_node));
	if(current->next == NULL){
		printf("NULL POINTER RETURNED CREATING BMPS - SDL MODULE");
		exit(2);
	}
	len = strlen(p);
	*(p + len - 1) = '\0';
	current = current->next;
	strcpy(current->bmp_address, p);
	current->struct_surface = SDL_LoadBMP(p);
	current->next = NULL;
	return current;
}

Bmp_node *initialise_bmp_list(){

	Bmp_node *start;

	start = (Bmp_node*)malloc(sizeof(Bmp_node));
	if(start == NULL){
		printf("NULL POINTER RETURNED CREATING BMPS - SDL MODULE");
		exit(2);
	}
	strcpy(start->bmp_address, "!!START!!");
	start->next = NULL;
	return start;
}

//This function creates a base surface for blitting all of the bmp's onto. Without this base surface, no bmps can be displayed on screen
SDL_Surface* init_base_surface(SDL_Simplewin *sw){

	//declare a surface and the rectangle it is going to be filled with
	SDL_Surface *base_surface;
	SDL_Rect base_rectdata = {0,0, WWIDTH, WHEIGHT};
	SDL_Rect *base_rect;
	base_rect = &base_rectdata;
	//declare the black background colour
	Uint32 black;
	//base surface is the window surface. we can now blit onto this surface
	base_surface = SDL_GetWindowSurface(sw->win);
    if(base_surface == NULL) {
        fprintf(stderr, "GetWindowSurface failed: %s\n", SDL_GetError());
        exit(1);
    }
	// make the base surface black
	black = SDL_MapRGB(base_surface->format, 0, 0, 0);
	SDL_FillRect(base_surface, NULL, black);

	return base_surface;
}

// This function is responsible for taking the game data into the relevant bmps for the screen.
// The seemingly magic numbers in the function are screen ratios for placing the images
void SDL_translate_game_to_BMPS(SDL_Simplewin *sw, Game *current, SDL_Surface *base_surface){

	//initiate base surface for blitting onto. Without this surface, no bmps can be blitted to screen
	if((base_surface = init_base_surface(sw)) == NULL){
		fprintf(stderr, "\nUnable to initialize base surface:  %s\n", SDL_GetError());
      SDL_Quit();
      exit(1);
	}

	// if the check button has been pressed, check the answer and respond accordingly
	if(current->check == 1){
		SDL_check_response(sw, current, base_surface);
	}

	blit_statics(sw, current, base_surface);

	blit_quit_check_hint(sw, current, base_surface);

	blit_the_spin(sw, current, base_surface);

	blit_quest_hintline(sw, current, base_surface);

	blit_the_display(sw, current, base_surface);

}
// This function is responsible for blitting the question image and the hint image
void blit_quest_hintline(SDL_Simplewin *sw, Game *current, SDL_Surface *base_surface){

	char hintstr[MAX_STRING];
	char queststr[MAX_STRING];

	//question if spin has been pressed
	if(current->spin != 0){
		strcpy(queststr, current->question[current->q_lookup].question);
		blit_image(current, sw, base_surface, WWIDTH/6,0,4*WWIDTH/6, WHEIGHT/6, queststr);
	}
	
	//4 bit or 8 bit hint
	if(current->hint == 1){
		current->num_bits == 4? strcpy(hintstr, "hint_4bit.bmp"): strcpy(hintstr, "hint_8bit.bmp");
			blit_image(current, sw, base_surface, WWIDTH/6, 5*WHEIGHT/6,4*WWIDTH/6, WHEIGHT/12, hintstr);
	}
}
// This function is responsible for blitting the quit, check and hint buttons
void blit_quit_check_hint(SDL_Simplewin *sw, Game *current, SDL_Surface *base_surface){

	char checkstr[MAX_STRING];
	char hintstr[MAX_STRING];
	char quitstr[MAX_STRING];

	// blit the quit animation
	current->quit == 0 ? strcpy(quitstr,"quit_orange.bmp"): strcpy(quitstr,"grey_quit.bmp");
	if(current->quit > 0){
		current->quit = current->quit + 1;
	}
	if(current->quit == 6){
		current->quit = 0;
		current->screen = 0;
	}
	blit_image(current, sw, base_surface, 0, 5*WHEIGHT/6,WWIDTH/6, WHEIGHT/6, quitstr);

	// blit the hint animation
	current->hint > 1 ? strcpy(hintstr,"grey_hint.bmp"): strcpy(hintstr,"hint_orange.bmp");
	if(current->hint > 1){
		current->hint = current->hint + 1;
	}
	if(current->hint == 5){
		current->hint = 1;
	}
	blit_image(current, sw, base_surface, 0,4*WHEIGHT/6,WWIDTH/6, WHEIGHT/6, hintstr);

	//blit the check button
	strcpy(checkstr,"green_check.bmp");
	blit_image(current, sw, base_surface, 5*WWIDTH/6,4*WHEIGHT/6,WWIDTH/6, WHEIGHT/3, checkstr);
}

// this functon hold all the images that are not affected by mouse clicks
void blit_statics(SDL_Simplewin *sw, Game *current, SDL_Surface *base_surface){

	char levelstr[MAX_STRING];
	char timerstr[MAX_STRING];
	char pointstr[MAX_STRING];
	
	//blit all of the static images onto the base_surface - ie. the images which aren'g going to change by mouse clicks
	if(current->spin == 0){
		blit_image(current, sw, base_surface, 0, 0, WWIDTH, WHEIGHT/5, "full_logo.bmp");

	}
	else{
		blit_image(current, sw, base_surface, 0, 0, WWIDTH/6, WHEIGHT/3, "Logo.bmp");
		blit_image(current, sw, base_surface, 5*WWIDTH/6, 0, WWIDTH/6, WHEIGHT/3, "Logo.bmp");
	}

	//blit the level
	blit_image(current, sw, base_surface, WWIDTH/6,11*WHEIGHT/12, 4*WWIDTH/6, WHEIGHT/12, "level_number.bmp");
	get_digit_str(current->level, levelstr);
	blit_image(current, sw, base_surface, 55*WWIDTH/97, 45*WHEIGHT/48, WWIDTH/35, WHEIGHT/24, levelstr);

	blit_image(current, sw, base_surface, 0,2*WHEIGHT/6,WWIDTH/6, WHEIGHT/6, "timer_blue.bmp");
	//blit the 10's column of the points
	get_digit_str(current->timer/10, timerstr);
	blit_image(current, sw, base_surface, 2*WWIDTH/36, 19*WHEIGHT/48, WWIDTH/36, WHEIGHT/12, timerstr);
	//blit the 1's column of the points
	get_digit_str(current->timer%10, timerstr);
	blit_image(current, sw, base_surface, 3*WWIDTH/36, 19*WHEIGHT/48, WWIDTH/36, WHEIGHT/12, timerstr);
	//if time has run out
	if(current->timer == 0){
		blit_image(current, sw, base_surface, 0, 0, WWIDTH, WHEIGHT, "out_of_time.bmp");
		SDL_UpdateWindowSurface(sw->win);
		SDL_Delay(2000);
		//go back to homescreen in next version
		exit(2);
	}

	blit_image(current, sw, base_surface, 0, 3*WHEIGHT/6,WWIDTH/6, WHEIGHT/6, "points_blue.bmp");
	//blit the 10's column of the points
	get_digit_str(current->score/10, pointstr);
	blit_image(current, sw, base_surface, 2*WWIDTH/36, 27*WHEIGHT/48, WWIDTH/36, WHEIGHT/12, pointstr);
	//blit the 1's column of the points
	get_digit_str(current->score%10, pointstr);
	blit_image(current, sw, base_surface, 3*WWIDTH/36, 27*WHEIGHT/48, WWIDTH/36, WHEIGHT/12, pointstr);	
}

//animate the spin button
void blit_the_spin(SDL_Simplewin *sw, Game *current, SDL_Surface *base_surface){

	char spinstr[MAX_STRING];
	//if spin hasnt been pressed once, blit green button flashing grey
	if(current->spin == 0){
		if((current->counter/10)%2 == 0){
			strcpy(spinstr,"grey_spin.bmp");
		}
		else{
			strcpy(spinstr,"green_spin.bmp");
		}
		current->counter ++;
	}
	else{//once spin has been pressed once, defualt g->spin = 1. if it is pressed it circles up to 5 as a grey button before coming back to being a green button
		current->spin > 1 ? strcpy(spinstr,"grey_spin.bmp"): strcpy(spinstr,"green_spin.bmp");
		//if g->spin is > 1 circle up until 5
		if(current->spin > 1){
			current->spin = current->spin + 1;
		}
		if(current->spin == 5){
			current->spin = 1;
		}
	}
	blit_image(current, sw, base_surface, 5*WWIDTH/6,2*WHEIGHT/6,WWIDTH/6, WHEIGHT/3, spinstr);
}

//This function check for the final answer is correct or not
void SDL_check_response(SDL_Simplewin *sw, Game *current, SDL_Surface *base_surface){
	
	//check if the answer if correct
	if(update_score(current) == 0){
		blit_image(current, sw, base_surface, 0, 0, WWIDTH, WHEIGHT, "wrong.bmp");
		SDL_UpdateWindowSurface(sw->win);
		SDL_Delay(500);
		current->check = 0;
	}
	else{
		blit_image(current, sw, base_surface, 0, 0, WWIDTH, WHEIGHT, "correct.bmp");
		SDL_UpdateWindowSurface(sw->win);
		SDL_Delay(500);
		current->spin = 0;
		current->check = 0;
		current->hint = 0;
	}	
}

//This function is a subfunction of SDL_translate_game_to_BMPS. it blit the spin wheels, the hold buttons and the nudge buttons
void blit_the_display(SDL_Simplewin *sw, Game *current, SDL_Surface *base_surface){

	char spinner[MAX_STRING];
	char nudgestr[MAX_STRING];
	char holdstr[MAX_STRING];
	int i;
	//depending on 4bit or 8 bit display, the wheel numbers, the hold and the nudges are blitted.
	if(current->num_bits == 4){
		for(i = 1; i <= 4; i++){
			current->display[i-1] == 0?strcpy(spinner, "spinner_0_4bit.bmp"): strcpy(spinner, "spinner_1_4bit.bmp");
			blit_image(current, sw, base_surface, i*WWIDTH/6,WHEIGHT/6,WWIDTH/6, WHEIGHT/3, spinner);
			current->hold[i-1] == 0?strcpy(holdstr, "green_hold_4bit.bmp"):strcpy(holdstr, "red_hold_4bit.bmp");
			blit_image(current, sw, base_surface, i*WWIDTH/6,3*WHEIGHT/6,WWIDTH/6, WHEIGHT/6, holdstr);

			//animate the nudge button
			current->nudge_pressed[i] == 0? strcpy(nudgestr, "green_nudge_4bit.bmp"): strcpy(nudgestr, "grey_nudge_4bit.bmp");
			if(current->nudge_pressed[i] > 0){
				current->nudge_pressed[i] = current->nudge_pressed[i] + 1;
			}
			if(current->nudge_pressed[i] == 6){
				current->nudge_pressed[i] = 0;
			}
			blit_image(current, sw, base_surface, i*WWIDTH/6,4*WHEIGHT/6,WWIDTH/6, WHEIGHT/6, nudgestr);
		}
	}
	else{
		for(i = 2; i <= 9; i++){
			current->display[i-2] == 0? strcpy(spinner, "spinner_0_8bit.bmp"): strcpy(spinner, "spinner_1_8bit.bmp");
			blit_image(current, sw, base_surface, i*WWIDTH/12,WHEIGHT/6, WWIDTH/12, WHEIGHT/3, spinner);
			current->hold[i-2] == 0? strcpy(holdstr, "hold_green_8bit.bmp"): strcpy(holdstr, "hold_red_8bit.bmp");
			blit_image(current, sw, base_surface, i*WWIDTH/12,3*WHEIGHT/6,WWIDTH/12, WHEIGHT/6, holdstr);

			//animate the nudge button
			current->nudge_pressed[i] == 0? strcpy(nudgestr, "nudge_green_8bit.bmp"): strcpy(nudgestr, "nudge_grey_8bit.bmp");
			if(current->nudge_pressed[i] > 0){
				current->nudge_pressed[i] = current->nudge_pressed[i] + 1;
			}
			if(current->nudge_pressed[i] == 6){
				current->nudge_pressed[i] = 0;
			}
			blit_image(current, sw, base_surface, i*WWIDTH/12,4*WHEIGHT/6,WWIDTH/12, WHEIGHT/6, nudgestr);
		}
	}
}

//This function is the code which actually blits the relevant bmp's in the correct place on the screen
void blit_image(Game *current, SDL_Simplewin *sw, SDL_Surface *base_surface, int x, int y, int w, int h, char str[MAX_STRING]){

	SDL_Surface *surface;
	//delcare the placements of the logos
	SDL_Rect rectdata = {x,y,w, h};
	SDL_Rect *rect;
	Bmp_node *bmp_current;

	bmp_current = current->start;

	//search through the linked list of bmp addresses until find the string match
	while(strcmp(bmp_current->bmp_address, str) != 0){
		if(bmp_current->next != NULL){
			bmp_current = bmp_current->next;
		}
		else{
			printf("NOT A VALID BMP ADDRESS- SDL MODULE: BLIT IMAGE\n");
			printf("%s\n", str);
			exit(2);
		}
	}
	// string match found. so take the surface from the same node nd blit
	surface = bmp_current->struct_surface;
	rect = &rectdata;
	SDL_BlitScaled(surface, NULL, base_surface, rect);	
}

//This function is called by main. It checks for an event and then reacts accordingly. ie. if there is a mouse click it updates the game status
void check_for_event(SDL_Simplewin *sw, Game *current, SDL_Surface *base_surface){

	SDL_Event event;
	int x, y;

	/* Check for events */
	while((SDL_PollEvent(&event)) == 1){  /* Loop until there are no events left on the queue */
	    switch(event.type){ /* Process the appropriate event type */
	        case SDL_MOUSEBUTTONDOWN:
	        	y = event.button.y; //y coordinate
		    	x = event.button.x; // x coordinate
	        	if(x > 0 && x < WWIDTH && y > 0 && y < WHEIGHT && event.button.button == SDL_BUTTON_LEFT){
	        		//depending on the screen state, the mouse click changes affect the screen in different ways...
	        		if(current->screen == 0){
		    			home_screen_changes(x, y, current, sw, base_surface);
		    		}
	        		if(current->screen == 1){
		    			make_game_changes(x, y, current, sw, base_surface);
		    		}
		    		if(current->screen == 2){
		    			high_screen_changes(x, y, current, sw, base_surface);
		    		}
		    		if(current->screen == 3){
		    			tutorial_screen_changes(x, y, current, sw, base_surface);
		    		}
			    }
	    		break;   
	    }
	} 	
}

//This function is a subfunction of check_for_event. It make the appropriate changes to the game structure based on the position of any mouse click
void make_game_changes(int x, int y, Game *current, SDL_Simplewin *sw, SDL_Surface *base_surface){

	int i;

	// quit button first- this allows user to quit at any point 
	if(x > 0 && y > 5*WHEIGHT/6 && x < WWIDTH/6 && y < WHEIGHT){
		current->quit = 1;
	}

	if(current->spin == 0){
	//spin button
		if(x > 5*WWIDTH/6 && y > 2*WHEIGHT/6 && x < WWIDTH && y < 4*WHEIGHT/6){
			current->spin = 1;
			current->counter = 0;
			randomise_display(current);
		}
	}
	//make sure spin has been pressed before any other button can be pressed.
	if(current->spin == 0){
		return;
	}

	//spin button after initial spin
	if( x > 5*WWIDTH/6 && y > 2*WHEIGHT/6 && x < WWIDTH && y < 4*WHEIGHT/6){
		current->spin = 2;
		for(i = 0; i < current->num_bits; i ++){
			if(current->hold[i] != 1){
				current->display[i] == 0? (current->display[i] = 1): (current->display[i] = 0); 
			}
		}
	}
	
	// check button
	if(x > 5*WWIDTH/6 && y > 4*WHEIGHT/6 && x < WWIDTH && y < WHEIGHT){
		current->check = 1;
		//check answer with current display
	}
	//hint 
	if(x > 0 && y > 4*WHEIGHT/6 && x < WWIDTH/6 && y < 5*WHEIGHT/6){
		current->hint = 2;
	}

	//hold
	if(current->num_bits == 4){
		for(i = 1; i <= 4; i++){
			if( x > i*WWIDTH/6 && y > 3*WHEIGHT/6 && x < (i+1)*WWIDTH/6 && y < 4*WHEIGHT/6){
				current->hold[i-1] == 0? (current->hold[i-1] = 1): (current->hold[i-1] = 0);
			}	
		}
	}
	else{
		for(i = 2; i <= 9; i++){
			if( x > i*WWIDTH/12 && y > 3*WHEIGHT/6 && x < (i+1)*WWIDTH/12 && y < 4*WHEIGHT/6){
				current->hold[i-2] == 0? (current->hold[i-2] = 1): (current->hold[i-2] = 0);
			}	
		}
	}

	//nudge
	if(current->num_bits == 4){
		for(i = 1; i <= 4; i++){
			if( x > i*WWIDTH/6 && y > 4*WHEIGHT/6 && x < (i+1)*WWIDTH/6 && y < 5*WHEIGHT/6){
				if(current->hold[i - 1] == 0){
					current->display[i-1] == 0? (current->display[i-1] = 1): (current->display[i-1] = 0);
				}
				current->nudge_pressed[i] = 1;
			}	
		}
	}
	else{
		for(i = 2; i <= 9; i++){
			if( x > i*WWIDTH/12 && y > 4*WHEIGHT/6 && x < (i+1)*WWIDTH/12 && y < 5*WHEIGHT/6){
				if(current->hold[i - 2] == 0){
					current->display[i-2] == 0? (current->display[i-2] = 1): (current->display[i-2] = 0);
				}
				current->nudge_pressed[i] = 1;
			}	
		}
	}
}

// this function takes an integer and returns the correct bmp address for the numbers image
void get_digit_str(int n, char *p){

	switch(n){
		case 0: strcpy(p, "0_num.bmp"); break;
		case 1: strcpy(p, "1_num.bmp"); break;
		case 2: strcpy(p, "2_num.bmp"); break;
		case 3: strcpy(p, "3_num.bmp"); break;
		case 4: strcpy(p, "4_num.bmp"); break;
		case 5: strcpy(p, "5_num.bmp"); break;
		case 6: strcpy(p, "6_num.bmp"); break;
		case 7: strcpy(p, "7_num.bmp"); break;
		case 8: strcpy(p, "8_num.bmp"); break;
		case 9: strcpy(p, "9_num.bmp"); break;
	}
}

// this function takes a character and returns the correct bmp address for the characters image
void get_letter_str(char c, char *p){

	if(isalpha(c)){
		toupper(c);
	}

	if(c != ' '){
		if(!isalnum(c)){
			printf("Must be an alpha character\n");
			exit(2);
		}
	}

	switch(c){
		case ' ': strcpy(p, "space_let.bmp");break;
		case 'A': strcpy(p, "A_let.bmp"); break;
		case 'B': strcpy(p, "B_let.bmp"); break;
		case 'C': strcpy(p, "C_let.bmp"); break;
		case 'D': strcpy(p, "D_let.bmp"); break;
		case 'E': strcpy(p, "E_let.bmp"); break;
		case 'F': strcpy(p, "F_let.bmp"); break;
		case 'G': strcpy(p, "G_let.bmp"); break;
		case 'H': strcpy(p, "H_let.bmp"); break;
		case 'I': strcpy(p, "I_let.bmp"); break;
		case 'J': strcpy(p, "J_let.bmp"); break;
		case 'K': strcpy(p, "K_let.bmp"); break;
		case 'L': strcpy(p, "L_let.bmp"); break;
		case 'M': strcpy(p, "M_let.bmp"); break;
		case 'N': strcpy(p, "N_let.bmp"); break;
		case 'O': strcpy(p, "O_let.bmp"); break;
		case 'P': strcpy(p, "P_let.bmp"); break;
		case 'Q': strcpy(p, "Q_let.bmp"); break;
		case 'R': strcpy(p, "R_let.bmp"); break;
		case 'S': strcpy(p, "S_let.bmp"); break;
		case 'T': strcpy(p, "T_let.bmp"); break;
		case 'U': strcpy(p, "U_let.bmp"); break;
		case 'V': strcpy(p, "V_let.bmp"); break;
		case 'W': strcpy(p, "W_let.bmp"); break;
		case 'X': strcpy(p, "X_let.bmp"); break;
		case 'Y': strcpy(p, "Y_let.bmp"); break;
		case 'Z': strcpy(p, "Z_let.bmp"); break;
		case '0': strcpy(p, "0_num.bmp"); break;
		case '1': strcpy(p, "1_num.bmp"); break;
		case '2': strcpy(p, "2_num.bmp"); break;
		case '3': strcpy(p, "3_num.bmp"); break;
		case '4': strcpy(p, "4_num.bmp"); break;
		case '5': strcpy(p, "5_num.bmp"); break;
		case '6': strcpy(p, "6_num.bmp"); break;
		case '7': strcpy(p, "7_num.bmp"); break;
		case '8': strcpy(p, "8_num.bmp"); break;
		case '9': strcpy(p, "9_num.bmp"); break;
	}
}

// This function check that the user hasnt run out of time
void check_for_clock(SDL_Simplewin *sw, Game *current, SDL_Surface *base_surface){

	if(current->spin != 0){
		current->counter++;
		if(current->counter%30 == 0){
			current->timer--;
		}
	}
}

// This function is responsible for blitting the correct images when the game is on the home screen
void home_mode_bmps(SDL_Simplewin *sw, Game *current, SDL_Surface *base_surface){

	char playstr[MAX_STRING];
	char highstr[MAX_STRING];
	char tutstr[MAX_STRING];

	//initiate base surface for blitting onto. Without this surface, no bmps can be blitted to screen
	if((base_surface = init_base_surface(sw)) == NULL){
		fprintf(stderr, "\nUnable to initialize base surface:  %s\n", SDL_GetError());
      SDL_Quit();
      exit(1);
	}

	// blit all of the images relevant to the home screen
	blit_image(current, sw, base_surface, 0,5*WHEIGHT/6,WWIDTH/6, WHEIGHT/6, "quit_orange.bmp");
	blit_image(current, sw, base_surface, WWIDTH/4, 0, WWIDTH/2, WHEIGHT/5, "full_logo.bmp");
	
	//animate the play button
	current->home_play == 0 ? strcpy(playstr,"play_game_green.bmp"): strcpy(playstr,"play_game_grey.bmp");
	if(current->home_play > 0){
		current->home_play = current->home_play + 1;
	}
	if(current->home_play == 5){
		current->screen = 1;
	}
	blit_image(current, sw, base_surface, WWIDTH/3, WHEIGHT/4, WWIDTH/3, WHEIGHT/5, playstr);

	//animate the high score button
	current->home_high == 0 ? strcpy(highstr,"high_scores_green.bmp"): strcpy(highstr,"high_scores_grey.bmp");
	if(current->home_high > 0){
		current->home_high = current->home_high + 1;
	}
	if(current->home_high == 5){
		current->screen = 2;
	}
	blit_image(current, sw, base_surface, WWIDTH/3, 2*WHEIGHT/4, WWIDTH/3, WHEIGHT/5, highstr);

	//animate the tutorial button
	current->home_tut == 0 ? strcpy(tutstr,"tutorial_green.bmp"): strcpy(tutstr,"tutorial_grey.bmp");
	if(current->home_tut > 0){
		current->home_tut = current->home_tut + 1;
	}
	if(current->home_tut == 5){
		current->screen = 3;
		current->home_tut = 0;
	}
	blit_image(current, sw, base_surface, WWIDTH/3, 3*WHEIGHT/4, WWIDTH/3, WHEIGHT/5, tutstr);	
}

// This function is responsible for dealing with the mouse events on the home screen
void home_screen_changes(int x, int y, Game *current, SDL_Simplewin *sw, SDL_Surface *base_surface){

	// quit button first- this allows user to quit the game 
	if(x > 0 && y > 5*WHEIGHT/6 && x < WWIDTH/6 && y < WHEIGHT){
		exit(2);
	}

	// play the game button
	if(x > WWIDTH/3 && y > WHEIGHT/4 && x < (2*WWIDTH)/3 && y < (9*WHEIGHT)/20){
		current->home_play = 1;
	}

	// high scores button
	if(x > WWIDTH/3 && y > (2*WHEIGHT)/4 && x < (2*WWIDTH)/3 && y < (14*WHEIGHT)/20){
		current->home_high = 1;
	}

	// tutorial button
	if(x > WWIDTH/3 && y > (3*WHEIGHT)/4 && x < (2*WWIDTH)/3 && y < (19*WHEIGHT)/20){
		current->home_tut = 1;
	}
}

// This function is responsible for blitting the correct images when the game is on the high scores screen
void high_mode_bmps(SDL_Simplewin *sw, Game *current, SDL_Surface *base_surface){

	char quitstr[MAX_STRING];

	//initiate base surface for blitting onto. Without this surface, no bmps can be blitted to screen
	if((base_surface = init_base_surface(sw)) == NULL){
		fprintf(stderr, "\nUnable to initialize base surface:  %s\n", SDL_GetError());
      SDL_Quit();
      exit(1);
	}

	// blit the quit animation
	current->quit == 0 ? strcpy(quitstr,"quit_orange.bmp"): strcpy(quitstr,"grey_quit.bmp");
	if(current->quit > 0){
		current->quit = current->quit + 1;
	}
	if(current->quit == 6){
		current->quit = 0;
		current->screen = 0;
	}
	blit_image(current, sw, base_surface, 0, 5*WHEIGHT/6,WWIDTH/6, WHEIGHT/6, quitstr);

	blit_image(current, sw, base_surface, WWIDTH/4, 0, WWIDTH/2, WHEIGHT/5, "full_logo.bmp");

	// blit the actual names and scores
	blit_the_high_scores(sw, current, base_surface);	
}

// This function is responsible for blitting the names and scores themselves
void blit_the_high_scores(SDL_Simplewin *sw, Game *current, SDL_Surface *base_surface){

	char *p;
	char letstr[MAX_STRING];
	char numstr[MAX_STRING];
	int i = 7;
	int j = 6;
	int cnt = 0;

	while(j < 16){

		p = current->hi_scores[j-6].name;
		cnt = 0;
		i = 7;

		// blit the characters one by one
		while(cnt < 4){
			// reinitialise letstr
			letstr[0] = '\0';
			//get new letstr
			get_letter_str(*p, letstr);
			//blit the high scores
			blit_image(current, sw, base_surface, i*WWIDTH/25, j*WHEIGHT/20,WWIDTH/25, WHEIGHT/25, letstr);
			//increment to next letter
			i++;
			p++;
			cnt++;
		}

		// blit the score
		i = i + 2;
		//blit the 1000's column of the points
		get_digit_str(current->hi_scores[j-6].score/1000, numstr);
		blit_image(current, sw, base_surface, i*WWIDTH/25, j*WHEIGHT/20, WWIDTH/25, WHEIGHT/25, numstr);
		i++;
		//blit the 100's column of the points
		get_digit_str(current->hi_scores[j-6].score/100, numstr);
		blit_image(current, sw, base_surface, i*WWIDTH/25, j*WHEIGHT/20, WWIDTH/25, WHEIGHT/25, numstr);
		i++;
		//blit the 10's column of the points
		get_digit_str(current->hi_scores[j-6].score/10, numstr);
		blit_image(current, sw, base_surface, i*WWIDTH/25, j*WHEIGHT/20, WWIDTH/25, WHEIGHT/25, numstr);
		//blit the 1's column of the points
		i++;
		get_digit_str(current->hi_scores[j-6].score%10, numstr);
		blit_image(current, sw, base_surface, i*WWIDTH/25, j*WHEIGHT/20, WWIDTH/25, WHEIGHT/25, numstr);

		j++;
	}
}

// This function is responsible for correctly dealing with the mosue clicks when the game is on the high scores screen
void high_screen_changes(int x, int y, Game *current, SDL_Simplewin *sw, SDL_Surface *base_surface){

	// quit button first- this allows user to quit the game 
	if(x > 0 && y > 5*WHEIGHT/6 && x < WWIDTH/6 && y < WHEIGHT){
		current->quit = 1;
	}
}

// This function is responsible for blitting the correct images when the game is in the tutorial screen
void tutorial_mode_bmps(SDL_Simplewin *sw, Game *current, SDL_Surface *base_surface){

	char quitstr[MAX_STRING];

	//initiate base surface for blitting onto. Without this surface, no bmps can be blitted to screen
	if((base_surface = init_base_surface(sw)) == NULL){
		fprintf(stderr, "\nUnable to initialize base surface:  %s\n", SDL_GetError());
      SDL_Quit();
      exit(1);
	}

	blit_image(current, sw, base_surface, 0, 0, WWIDTH, 4*WHEIGHT/5, "space_let.bmp");

	// blit the quit animation
	current->quit == 0 ? strcpy(quitstr,"quit_orange.bmp"): strcpy(quitstr,"grey_quit.bmp");
	if(current->quit > 0){
		current->quit = current->quit + 1;
	}
	if(current->quit == 6){
		current->quit = 0;
		current->screen = 0;
	}
	blit_image(current, sw, base_surface, 0, 5*WHEIGHT/6,WWIDTH/6, WHEIGHT/6, quitstr);

	// use a switch statement to run the tutorial though when the mouse is clicked
	switch(current->home_tut){
		case 0: blit_image(current, sw, base_surface, WWIDTH/6, WHEIGHT/10, 2*WWIDTH/3, 2*WHEIGHT/3, "tutorialscreen1.bmp");
				blit_image(current, sw, base_surface, WWIDTH/6, 5*WHEIGHT/6, 2*WWIDTH/3, WHEIGHT/8, "tutorial1.bmp");
				break;
		case 1: blit_image(current, sw, base_surface, WWIDTH/6, WHEIGHT/10, 2*WWIDTH/3, 2*WHEIGHT/3, "tutorialscreen2.bmp");
				blit_image(current, sw, base_surface, WWIDTH/6, 5*WHEIGHT/6, 2*WWIDTH/3, WHEIGHT/8, "tutorial2.bmp");
				break;
		case 2: blit_image(current, sw, base_surface, WWIDTH/6, WHEIGHT/10, 2*WWIDTH/3, 2*WHEIGHT/3, "tutorialscreen2.bmp");
				blit_image(current, sw, base_surface, WWIDTH/6, 5*WHEIGHT/6, 2*WWIDTH/3, WHEIGHT/8, "tutorial2b.bmp");
				break;
		case 3: blit_image(current, sw, base_surface, WWIDTH/6, WHEIGHT/10, 2*WWIDTH/3, 2*WHEIGHT/3, "tutorialscreen3.bmp");
				blit_image(current, sw, base_surface, WWIDTH/6, 5*WHEIGHT/6, 2*WWIDTH/3, WHEIGHT/8, "tutorial3.bmp");
				break;
		case 4: blit_image(current, sw, base_surface, WWIDTH/6, WHEIGHT/10, 2*WWIDTH/3, 2*WHEIGHT/3, "tutorialscreen3.bmp");
				blit_image(current, sw, base_surface, WWIDTH/6, 5*WHEIGHT/6, 2*WWIDTH/3, WHEIGHT/8, "tutorial3b.bmp");
				break;
		case 5: blit_image(current, sw, base_surface, WWIDTH/6, WHEIGHT/10, 2*WWIDTH/3, 2*WHEIGHT/3, "tutorialscreen4.bmp");
				blit_image(current, sw, base_surface, WWIDTH/6, 5*WHEIGHT/6, 2*WWIDTH/3, WHEIGHT/8, "tutorial4.bmp");
				break;
		case 6: blit_image(current, sw, base_surface, WWIDTH/6, 2*WHEIGHT/6, 2*WWIDTH/3, 2*WHEIGHT/8, "good_luck.bmp");
				break;
		case 7: current->screen = 0;
				break;

	}
}

// This function is responsible for dealing with the mouse clicks on the tutorial screen
void tutorial_screen_changes(int x, int y, Game *current, SDL_Simplewin *sw, SDL_Surface *base_surface){

	// quit button first- this allows user to quit the game 
	if(x > 0 && y > 5*WHEIGHT/6 && x < WWIDTH/6 && y < WHEIGHT){
		current->quit = 1;
	}
	else{
		// move onto the next tutorial page
		current->home_tut++;
	}
}




